<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: haskell | The Grimoire of Karno]]></title>
  <link href="http://karno.github.io/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://karno.github.io/"/>
  <updated>2013-05-29T21:51:43+09:00</updated>
  <id>http://karno.github.io/</id>
  <author>
    <name><![CDATA[Karno]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[冷やしHaskellはじめました。]]></title>
    <link href="http://karno.github.io/blog/2013/05/29/leng-yasihaskellhazimemasita./"/>
    <updated>2013-05-29T20:51:00+09:00</updated>
    <id>http://karno.github.io/blog/2013/05/29/leng-yasihaskellhazimemasita.</id>
    <content type="html"><![CDATA[<p>やんごとなき事情によって大学に宿泊を強制される毎週水曜日の時間をつぶすため，Haskellの勉強を始めました．
Haskellの勉強過程をまとめて叩いてもらうためにブログ始めたので，毎週水曜日にちまちま更新するつもりです．</p>

<p>参考書には，<a href="http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Haskell-Graham-Hutton/dp/4274067815">プログラミング Haskell</a>を選択しています．この本ではHugsを使っているみたいですが，僕はghciを使っていくつもりです．
ちなみに僕自身のプログラミングスキルとしては，ある程度のC, C#, Javaの知識を持っています．</p>

<h1>3章:  型とクラス</h1>

<p>1章2章は環境構築や基本部分なので飛ばしちゃいました．</p>

<h2>基本型とリスト，タプルが主な型</h2>

<p>基本型としては以下の型が例にあげられてました．</p>

<ul>
<li>Bool &ndash; 真偽値</li>
<li>Char &ndash; 文字</li>
<li>String &ndash; 文字列</li>
<li>Int &ndash; 固定精度倍数</li>
<li>Integer &ndash; 多倍長整数</li>
<li>Float &ndash; 単精度浮動小数点数</li>
</ul>


<p>ざっと調べたところ，小数の型にはいろいろあるみたい．追々分かるのかな．</p>

<p>リストとかタプルは</p>

<pre><code>['リ','ス','ト'] :: [Char]
('タ','プ','ル') :: (Char, Char, Char)
</code></pre>

<p>この通り．</p>

<h2>全ての式は型を持つ</h2>

<p>静的型付け言語であればだいたいなんでもそんな感じですよね．<br/>
ただ，Haskellにおいては型推論が強力で，割と何も言わなくても綺麗に型が付くみたいです．</p>

<p>C#で</p>

<pre><code>(x, y) =&gt; x + y
</code></pre>

<p>とか書くとコンパイラにぶちのめされますが，Haskellなら</p>

<pre><code>\x y -&gt; x + y
</code></pre>

<p>でも怒られません．</p>

<pre><code>Prelude&gt; :type \x y -&gt; x + y
\x y -&gt; x + y :: Num a =&gt; a -&gt; a -&gt; a
</code></pre>

<p>みたいにちゃんとNumを二つとってNumを返す感じになってます．</p>

<p>ちなみに<code>Num a =&gt; a -&gt; a -&gt; a</code>部分の見方は，Numクラスのインスタンスである型aについて型aの値を2回取って型aの値を返す，みたいな感じらしいです．</p>

<p>型クラスっていうのは要するにinterface みたいなものでしょうか．
Numにキャスト可能な型aにおいてaをとってaを取ってaを返す，みたいな？</p>

<p>実際にはNumにはさっきのIntやらIntegerやらFloatやらが代入可能みたいです．</p>

<h2>カリー化</h2>

<p>どんな料理にもカレー粉をぶち込むとカレー味に染まるアレ<strong>ではないです</strong>．</p>

<p>多引数関数を1引数関数の高階関数に変換するアレです．</p>

<pre><code>\x y z -&gt; x + y + z
</code></pre>

<p>が</p>

<pre><code>\x -&gt; (\y -&gt; (\z -&gt; x + y + z))
</code></pre>

<p>になるというおはなし．</p>

<p>実は <code>+</code> も Num a を二回取ってaを返すタイプの関数なので</p>

<pre><code>Prelude&gt; :type (+)
(+) :: Num a =&gt; a -&gt; a -&gt; a
</code></pre>

<p>みたいな感じです．</p>

<p>そしてそして，カリー化された関数は<strong>部分適用</strong>というワザが使えまして，</p>

<pre><code>Prelude&gt; :type (+ 2)
(+ 2) :: Num a =&gt; a -&gt; a
</code></pre>

<p>のように <code>(+ 2)</code> が Num aを取って2を足して返す関数になってるわけです．</p>

<pre><code>Prelude&gt; let plus2 = (+ 2)
Prelude&gt; plus2 5
7
</code></pre>

<p>ね．(ちなみにghciにおいて，letを使うと変数を束縛できるらしいです)</p>

<h2>こんな感じで</h2>

<p>Markdownの練習を兼ねてゆるふわとやっていきます．</p>

<p>ご意見ご感想などは<a href="http://twitter.com/karno">twitter:@karno</a>まで．(記事のURLを付けていただけると助かります)</p>
]]></content>
  </entry>
  
</feed>
